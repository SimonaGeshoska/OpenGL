typedef
glm::vec4
point4;
point4
points[NumVertices];
color4
colors[NumVertices];
point4
vertex_positions[8]
=
{
point4(
-­‐0.5,
-­‐0.5,
0.5,
1.0
),
point4(
-­‐0.5,
0.5,
0.5,
1.0
),
point4(
0.5,
0.5,
0.5,
1.0
),
point4(
0.5,
-­‐0.5,
0.5,
1.0
),
point4(
-­‐0.5,
-­‐0.5,
-­‐0.5,
1.0
),
point4(
-­‐0.5,
0.5,
-­‐0.5,
1.0
),
point4(
0.5,
0.5,
-­‐0.5,
1.0
),
point4(
0.5,
-­‐0.5,
-­‐0.5,
1.0
)
};
color4
vertex_colors[8]
=
{
color4(
0.0,
0.0,
0.0,
1.0
),
//
black
color4(
1.0,
0.0,
0.0,
1.0
),
//
red
color4(
1.0,
1.0,
0.0,
1.0
),
//
yellow
color4(
0.0,
1.0,
0.0,
1.0
),
//
green
color4(
0.0,
0.0,
1.0,
1.0
),
//
blue
color4(
1.0,
0.0,
1.0,
1.0
),
//
magenta
color4(
1.0,
1.0,
1.0,
1.0
),
//
white
color4(
0.0,
1.0,
1.0,
1.0
)
//
cyan
};
void
quad(
int
a,
int
b,
int
c,
int
d
)
{
//first
triangle
colors[Index]
=
vertex_colors[a];
points[Index]
=
vertex_positions[a];
Index++;
colors[Index]
=
vertex_colors[b];
points[Index]
=
vertex_positions[b];
Index++;
colors[Index]
=
vertex_colors[c];
points[Index]
=
vertex_positions[c];
Index++;
//second
triangle
colors[Index]
=
vertex_colors[a];
points[Index]
=
vertex_positions[a];
Index++;
colors[Index]
=
vertex_colors[c];
points[Index]
=
vertex_positions[c];
Index++;
colors[Index]
=
vertex_colors[d];
points[Index]
=
vertex_positions[d];
Index++;}
//
generate
12
triangles:
36
vertices
and
36
colors
void
colorcube()
{
quad(
1,
0,
3,
2
);
quad(
2,
3,
7,
6
);
quad(
3,
0,
4,
7
);
quad(
6,
5,
1,
2
);
quad(
4,
5,
6,
7
);
quad(
5,
4,
0,
1
);}
//Cube
VBO
and
VAO
initialization
void
initCube(){
//
Load
shaders
program
=
LoadShaders(
"vshaderCube.vert",
"fshaderCube.frag"
);
glUseProgram(
program
);
//generate
and
bind
a
VAO
for
the
Cube
glGenVertexArrays(1,
&vao);
glBindVertexArray(vao);
colorcube();
//
Create
and
initialize
a
buffer
object
glGenBuffers(
1,
&buffer
);
glBindBuffer(
GL_ARRAY_BUFFER,
buffer
);
glBufferData(
GL_ARRAY_BUFFER,
sizeof(points)
+
sizeof(colors),
NULL,
GL_STATIC_DRAW
);
glBufferSubData(
GL_ARRAY_BUFFER,
0,
sizeof(points),
points
);
glBufferSubData(
GL_ARRAY_BUFFER,
sizeof(points),
sizeof(colors),
colors
);
//
set
up
vertex
arrays
GLuint
vPosition
=
glGetAttribLocation(
program,
"vPosition"
);
glEnableVertexAttribArray(
vPosition
);
glVertexAttribPointer(
vPosition,
4,
GL_FLOAT,
GL_FALSE,
0,BUFFER_OFFSET(0)
);
GLuint
vColor
=
glGetAttribLocation(
program,
"vColor"
);
glEnableVertexAttribArray(
vColor
);
glVertexAttribPointer(
vColor,
4,
GL_FLOAT,
GL_FALSE,
0,BUFFER_OFFSET(sizeof(points))
);
glBindVertexArray(0);
}
void
displayCube(){
glUseProgram(program);
glBindVertexArray(vao);
glDrawArrays(
GL_TRIANGLES,
0,
NumVertices
);
glBindVertexArray(0);}
